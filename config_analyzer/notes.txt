TODO :
Pas sur que edit version soit nécessaire à supprimer peut être
Est-ce que si on créé un software base config file avec le même nom qu'un qui existe déjà mais qui est rattaché à un logiciel ou une version différente, ca ne pose pas de probleme ?
Ajouter un login
Ajouter une traduction
S'assurer que /software.name/software.version/SoftwareBaseConfigurationFile.file_name est un identifiant unique
Dans /Evotec.exe/3.0.5.0/params.cfg qu'est ce qu'on fait si des valeurs sont pas dans le parsed file ? On les affiche à la fin ?
On pourrait utiliser les séprateurs <nom> du fichier parsé pour diviser en plusieurs tableaux plus facile à lire
On pourrait ajouter une notion d'ordre d'affichage des lignes pour pouvoir les modifiers (ajax glisser déposer ?)

http://localhost:5000/software_versions/1/view
sur cette page il faut afficher + d'infos dans la liste des fichiers config de base, comme par exemple, nombre de parametres, nombre de parametres avec regle, nombre de clients connu avec cette version, etc

http://localhost:5000/software_base_configuration/Evotec.exe/3.0.5.0/params.cfg
ici on peut reprendre les info affichés par l'edit

On peut dans la db pour les champs dangereux (par exemple les nom de table dans additionalparam utiliser des enums plutôt que laisser le champ libre)
class TableType(enum.Enum):
    CLIENT = "clients"
    ROBOT_CLIENT = "robot_clients"
    ROBOT_MODEL = "robot_models"
    SOFTWARE = "softwares"
    SOFTWARE_VERSION = "software_versions"

idem pour les regles (equals/contains/regex-match/ignore/etc)

Remember :

Pour modif db

plus nécessaire
docker-compose exec config_analyzer flask db init 

a chaques modifs
docker-compose exec config_analyzer flask db migrate -m "Description des changements"
docker-compose exec config_analyzer flask db upgrade

en cas de modif des relations 
docker exec -it config_analyzer_app flask db stamp head


convention de nommage avec Flask :

Structure de dossiers
tree /F /A config_analyzer > arborescence.txt

2. Règles pour les modèles

Fichiers : Nom au singulier, snake_case
Ex: client.py, machine_client.py

Classes : PascalCase au singulier
Ex: class Client, class MachineClient

Tables : __tablename__ en snake_case pluriel
Ex: __tablename__ = 'clients'

3. Règles pour les relations Many-to-Many

Table d'association :
Nom = [model1]_[model2] (ordre alphabétique) pluriel
Ex: robot_software.py pour Robot <> Software

4. Règles pour les Blueprints

Fichiers : Nom au pluriel
Ex: clients.py, machine_clients.py

Nom du blueprint : [ressource]_bp (pluriel)
Ex: clients_bp = Blueprint('clients', __name__)

URL prefix : /api/v1/[ressource]
Ex: app.register_blueprint(clients_bp, url_prefix='/api/v1/clients')

5. Convention pour les noms de variables

Instance unique : Singulier
Ex: client = Client.query.get(1)

Collections : Pluriel
Ex: clients = Client.query.all()

Relations :
One-to-Many: client.machines (pluriel)
Many-to-One: machine.client (singulier)


