services:
  config_analyzer:
    container_name: config_analyzer_app
    build:
      context: ./config_analyzer
      dockerfile: Dockerfile
    volumes:
      - ./config_analyzer:/app
      - ./migrations:/app/migrations  # Volume persistant pour les migrations
    environment:
      - DATABASE_URL=postgresql://postgres_u_config_analyzer:password_ca@config_analyzer_db:5432/config_analyzer_db
      - FLASK_APP=app:create_app  # Point d'entrée corrigé
      - FLASK_DEBUG=1
      - TZ=Europe/Paris 
    depends_on:
      config_analyzer_db:
        condition: service_healthy  # Attend que la base soit prête
    ports:
      - "5000:5000"
    networks:
      - config_network
    command: >
      sh -c "flask db upgrade && 
             python main.py"

  config_analyzer_db:
    container_name: postgres_config_analyzer_db
    image: postgres:15
    environment:
      POSTGRES_USER: postgres_u_config_analyzer
      POSTGRES_PASSWORD: password_ca
      POSTGRES_DB: config_analyzer_db
      TZ: Europe/Paris  # Ajoutez cette ligne
      PGTZ: Europe/Paris  # Ajoutez cette ligne
    healthcheck:  # Vérification de disponibilité
      test: ["CMD-SHELL", "pg_isready -U postgres_u_config_analyzer -d config_analyzer_db"]
      interval: 5s
      timeout: 5s
      retries: 10
    ports:
      - "5433:5432"  # Port externe différent pour éviter les conflits
    volumes:
      - pgdata_config_analyzer:/var/lib/postgresql/data
    networks:
      - config_network

volumes:
  pgdata_config_analyzer:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./pgdata_config_analyzer
  migrations:

networks:
  config_network:  # Réseau dédié pour l'isolation
    driver: bridge



